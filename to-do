- ball detection
- made-shot detection
- shot detection

- crear minidataset para el made-shot detection

- arreglar team association, ya que hay veces que las asignaciones no son correctas, sobretodo con oclusiones:
	- añadir contexto, por ejemplo, teniendo en cuenta si al asociarlo al equipo contrario, el otro equipo ya tenia 
		los jugadores completos, y todos tienen mas "score" a la hora de asociar que el jugador tratado
		
- tambien arreglar donde se encuentran las asociaciones a un equipo, ya que esta informacion sera necesaria para 
	a que equipo se asigna una accion

- intentar entrenar la yolo-cls con el dataset de imagenes creado a partir del spacejam dataset
- ir grabando algunos videos de vez en cuando en las pistas con la gopro, para crear el dataset de:
	- shot
	- pass
	- ball
	- (pensar en alguno mas, si hace falta, ya que se crea el dataset)
	
- antes de todo, probar a entrenar yolov8m-cls ajustando el dataset de imagenes creado a partir del spacejam dataset,
	(de manera que queden como es indicado aqui: https://docs.ultralytics.com/datasets/classify/#dataset-format),
	y ver que tal dan los resultados
	
	
opciones de mejora de inferencia:
1- si en n clasificaciones seguidas dice que se ha realizado tal accion, entonces tomar como que se ha realizado esa accion
	- pros: 
		- mas robusto
	- contras: 
		- tarda n veces mas en hacer la inferencia
	
	posiblemente implementar con mayorias, de manera que si en las ultimas m inferencias (siendo m impar), la mayoria es una cierta clase, pues 
	asignar esa clase
	
	
opciones de mejora de velocidad de algoritmo:
1- hacer inferencia cada k frames, no cada frame, con la cola de frames
	- pros: 
		- mas rapido
		- posiblemente mas generalizado
	- contras: 
		- menos detallado


- preguntar sobre entrega 15 diciembre
- preguntar de nuevo sobre histograma de colores
	reducir espacio de colores a 3 bits de color (dividir por 32 el color r,g y b) dara un color mas basto
		el resultado será una matriz 3d, luego comparar con las plantillas
- preguntar sobre estructura del tfg
	- introduccion
	- diseño
	- planning y presupuesto
	- implementacion
	- test y resultados
	- conclusiones y trabajos futuros




seguramente no guarde mas partidos ni escenas porque una vez se guarda la primera, tenemos scene0 y game0 (dado que entra en la condicion == 0)
pero para la siguiente entra en el else, y hay 1 archivo, pero al hacer range(numberScenes / numberGames), solo coge el 0 porque empieza desde el 0,
pero al estar ya en la base de datos entonces no lo crea









TO-DO desde dic 15:

- grabar nuevos videos a 2k 60 fps
- ver como resulta algun preprocesado con los frames de videos fullhd - done
- cambiar la inferencia de la accion a n acciones seguidas entonces es accion final (n puede ser cualquier numero) - done
- implementar nuevo modelo de yolo con el reconocimiento de pelota y tiro - done
- deteccion de canasta encestada - done 
- combinar deteccion de tiro de la yolo y reconocimiento de tiro del r2plus1d para la inferencia
- documentacion
- incluir coordenadas de aro en la base de datos de cada escena - done
- dividir entre frame donde pintar y frame donde se hacen las inferencias - done
- guardar estadisticas de canastas encestadas

ideas para confirmacion de tiro:
	- mezclar con informacion de yolo all_detections_model
	- cuando se detecte tiro con el modelo de acciones, coger el crop del jugador y predecir
		si dentro esta la pelota
	- lo mismo que lo anterior pero con el modelo ya aplicado para la prediccion de pelota,
		mirando si se situa dentro o cerca de la bounding box del jugador
	- si el jugador ha sido el ultimo en tener la posesion del balon
		- posesion -> distancia de la pelota a cada jugador (aplicar threshold maximo para evitar
			asignar posesion cuando la pelota esta en el aire)
	- mirar direccion de la pelota, si va en direccion al aro











